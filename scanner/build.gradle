plugins {
	id 'java-library'
	id 'com.github.harbby.gradle.serviceloader' version '1.1.8'
	id 'maven-publish'
	id 'jacoco'
}

version = project.mod_version
group = project.maven_group

repositories {
	mavenCentral()
	gradlePluginPortal()
}

dependencies {
	compileOnly 'org.jetbrains:annotations:16.0.2'
	compileOnly 'org.lwjgl:lwjgl-glfw:3.3.4'
	implementation 'com.google.code.gson:gson:2.11.0'
	implementation 'org.joml:joml:1.10.8'
	implementation 'org.slf4j:slf4j-api:2.0.+'
	implementation 'org.slf4j:slf4j-log4j12:2.0.+'
	implementation 'org.apache.commons:commons-text:1.12.0'

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
	testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.3'

	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.3'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

jar {
	manifest {
		attributes(
			'Scanner-Version': project.mod_version,
		)
	}
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs = ['-Xlint:deprecation']
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report

	reports {
		xml.required = true
		html.required = true
	}

	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(
				dir: it,
				exclude: [
					'com/midnightbits/scanner/rt/core/Id.class',
					'com/midnightbits/scanner/rt/core/InvalidIdentifierException.class',
					'com/midnightbits/scanner/rt/math/**',
					'com/midnightbits/scanner/utils/Manifests.class',
				])
		})
	}
}